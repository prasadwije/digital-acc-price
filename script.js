document.addEventListener('DOMContentLoaded', () => {
    const DATA_URL = 'https://script.google.com/macros/s/AKfycbyefFSmfSyLRqrQOoTbv5dKT0ncljBJs_uN-KHka98ZnUc9IoYvrLBDkFyII1-7ScS89A/exec';
    const CACHE_KEY = 'digitalPriceCache';
    const CACHE_EXPIRY = 3600000; // 1 hour in milliseconds

    const container = document.getElementById('products-container');
    const title = document.getElementById('page-title');

    const urlParams = new URLSearchParams(window.location.search);
    const isReseller = urlParams.get('role') === 'reseller';

    if (isReseller) {
        title.textContent = 'Reseller Price List (Private)';
    }

    // ----------------------------------------------------
    // ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏ ‡∑É‡∑Ñ Caching Logic ‡∂ë‡∂ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    // ----------------------------------------------------
    function processAndRenderData(data, isCached) {
        // Apps Script ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂ë‡∂± prices array ‡∂ë‡∂ö ‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
        const pricesData = (data && data.prices) ? data.prices : data;
        
		if (!Array.isArray(pricesData)) {
            console.error("Invalid data structure received. Prices array missing.");
            container.innerHTML = `<p style="color: red; text-align: center;">‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∑ä‚Äç‡∂∫‡∑î‡∑Ñ‡∂∫ ‡∂Ø‡∑ù‡∑Ç ‡∑É‡∑Ñ‡∑í‡∂≠‡∂∫‡∑í. Tiles ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.</p>`;
            hideLoader();
            return;
        }
		
        const groupedData = pricesData.reduce((acc, item) => {
            // Grouping Logic...
            const currentPrice = isReseller ? item.Reseller_Price_LKR : item.Customer_Price_LKR;
            
            if (!acc[item.Tool_Name] || currentPrice < acc[item.Tool_Name].minPrice) {
                acc[item.Tool_Name] = {
                    minPrice: currentPrice,
                    firstPlan: item,
                    plans: []
                };
            }
            acc[item.Tool_Name].plans.push(item);
            return acc;
        }, {});

        container.innerHTML = ''; 

        for (const toolName in groupedData) {
            const tool = groupedData[toolName];
            const firstPlan = tool.firstPlan;

            // ... (Copy Text Logic) ...
            const allPlansText = tool.plans.map(plan => {
                const price = isReseller ? plan.Reseller_Price_LKR : plan.Customer_Price_LKR;
                const priceLabel = isReseller ? 'Reseller Price' : 'Price';

                return `‚úÖ ${plan.Plan_Tier} (${plan.Subscription_Type}) - ${plan.Duration_Months}\n` +
                       `   LKR ${price.toLocaleString()} (${priceLabel})\n` +
                       `   Features: ${plan.Key_Features}`;
            }).join('\n\n');

            const safeAllPlansText = allPlansText.replace(/'/g, '‚Äô').replace(/\n/g, '\\n');
            
            // ... (Tile HTML Generate Logic) ...
            const copyButtonHtml = isReseller ? `
                <button class="copy-all-btn" 
                        onclick="event.stopPropagation(); event.preventDefault(); copyToClipboard('${safeAllPlansText}')">
                    <svg class="copy-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM19 5H8C6.9 5 6 5.9 6 7V21C6 22.1 6.9 23 8 23H19C20.1 23 21 22.1 21 21V7C21 5.9 20.1 5 19 5ZM19 21H8V7H19V21Z"/>
                    </svg>
                </button>
            ` : '';

            const detailsLink = `details.html?tool=${encodeURIComponent(toolName)}&role=${isReseller ? 'reseller' : 'customer'}`;
            
            const tileHtml = `
                <a href="${detailsLink}" class="product-tile">
                    ${isReseller ? copyButtonHtml : ''}
                    
                    <img src="${firstPlan.Image_URL}" alt="${toolName} Logo">
                    <h3>${toolName}</h3>
                    <p class="summary-price">Starting from LKR ${tool.minPrice.toLocaleString()}</p>
                </a>
            `;
            container.innerHTML += tileHtml;
        }

        // Cache ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Load ‡∂ö‡∑Ö‡∑è ‡∂±‡∂∏‡∑ä, Loader ‡∂ë‡∂ö hide ‡∂ö‡∂ª‡∂Ω‡∑è ‡∂¥‡∑É‡∑î‡∂∂‡∑í‡∂∏‡∑í‡∂±‡∑ä Update ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        if (isCached && isCached !== 'initial') {
             hideLoader();
             fetchLatestData();
        }
    }

    // ‡∂¥‡∑É‡∑î‡∂∂‡∑í‡∂∏‡∑í‡∂±‡∑ä ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠ Fetch ‡∂ö‡∂ª‡∂± function ‡∂ë‡∂ö
    function fetchLatestData() {
        fetch(DATA_URL)
        .then(response => {
            if (!response.ok) throw new Error('Network response not ok');
            return response.json();
        })
        .then(data => {
            const cachedItem = localStorage.getItem(CACHE_KEY);
            const currentCacheVersion = cachedItem ? JSON.parse(cachedItem).version : '0.0';

            // Version ‡∂ë‡∂ö Check ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            if (data.version && data.version > currentCacheVersion) {
                // ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠ Cache ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                // ... (Cache Saving Logic) ...
                
                // ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä Page ‡∂ë‡∂ö ‡∂±‡∑ê‡∑Ä‡∂≠ Render ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                processAndRenderData(data, false); 
            } else if (!currentCacheVersion) {
                 // ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ Cache ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠‡∑í‡∂±‡∂∏‡∑ä, ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑î ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä Load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                // ... (Cache Saving Logic) ...
                processAndRenderData(data, false);
            }
        })
        .catch(error => {
            console.error('Error fetching latest data:', error);
            // üî• Error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ü‡∑Ä‡∂≠‡∑ä Loader ‡∂ë‡∂ö Hide ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            hideLoader();
            // Cache ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä User ‡∂ß error ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±
            const cachedItem = localStorage.getItem(CACHE_KEY);
            if (!cachedItem) {
                container.innerHTML = `<p style="color: red; text-align: center;">‡∂Ö‡∂±‡∑ä‡∂≠‡∂ª‡∑ä‡∂¢‡∑è‡∂Ω ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è‡∑Ä ‡∂Ø‡∑ù‡∑Ç ‡∑É‡∑Ñ‡∑í‡∂≠‡∂∫‡∑í ‡∑Ñ‡∑ù Apps Script URL ‡∑Ä‡∑ô‡∂≠ ‡∂¥‡∑í‡∑Ä‡∑í‡∑É‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.</p>`;
            }
        });
    }

    // ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ Cache ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ø‡∂≠‡∑ä‡∂≠ Load ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const cachedItem = localStorage.getItem(CACHE_KEY);
    
    if (cachedItem) {
        const { data, timestamp, version } = JSON.parse(cachedItem);
        const expiryTime = CACHE_EXPIRY;

        if (Date.now() < timestamp + expiryTime) {
            // Cache ‡∂ë‡∂ö ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂±‡∂∏‡∑ä, ‡∂ö‡∑ä‡∑Ç‡∂´‡∑í‡∂ö‡∑Ä Load ‡∂ö‡∂ª‡∂Ω‡∑è, ‡∂¥‡∑É‡∑î‡∂∂‡∑í‡∂∏‡∑í‡∂±‡∑ä Update ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            processAndRenderData({prices: data, version: version}, 'initial'); 
            // üî• FIX: Initial Load ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂¥‡∑É‡∑ä‡∑É‡∑ö Loader ‡∂ë‡∂ö Hide ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            hideLoader(); 
        } else {
            // Cache ‡∂ë‡∂ö ‡∂ö‡∂Ω‡∑ä ‡∂â‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ô‡∂Ω‡∑è ‡∂±‡∂∏‡∑ä, ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑í‡∂±‡∑ä Load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            fetchLatestData();
        }
    } else {
        // Cache ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä, Loader ‡∂ë‡∂ö ‡∂≠‡∑í‡∂∫‡∂Ω‡∑è ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑í‡∂±‡∑ä Load ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        fetchLatestData();
    }
});


// ***************************************************************
// üí° GLOBAL FUNCTIONS (Toast and Loader)
// ***************************************************************

/**
 * Loading Screen ‡∂ë‡∂ö ‡∑É‡∂ü‡∑Ä‡∂∫‡∑í. Data Load ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ö.
 */
function hideLoader() {
    const loader = document.getElementById('loading-screen');
    if (loader) {
        // Transition ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑É‡∑Ñ‡∑í‡∂≠‡∑Ä Loader ‡∂ë‡∂ö ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        loader.classList.add('hidden');
    }
}

/**
 * ‡∂ï‡∂±‡∑ë‡∂∏ Text ‡∂ë‡∂ö‡∂ö‡∑ä Clipboard ‡∂ë‡∂ö‡∂ß Copy ‡∂ö‡∂ª‡∂∫‡∑í.
 */
function copyToClipboard(text) {
    // 1. Textarea ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂Ø‡∂±‡∑Ä‡∑è
    const tempInput = document.createElement('textarea');
    // HTML Escape ‡∂ö‡∂ª‡∂¥‡∑î Line Breaks ‡∑É‡∑ê‡∂∂‡∑ë Line Breaks ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í
    tempInput.value = text.replace(/\\n/g, '\n'); 
    document.body.appendChild(tempInput);
    
    // 2. Text ‡∂ë‡∂ö Select ‡∂ö‡∂ª‡∂Ω‡∑è Copy ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    tempInput.select();
    tempInput.setSelectionRange(0, 99999); // Mobile Support
    document.execCommand('copy');
    
    // 3. Textarea ‡∂ë‡∂ö Remove ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    document.body.removeChild(tempInput);

    // 4. Notification ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±
    showToast('Copied to clipboard!');
}

/**
 * Auto-hiding Toast Notification ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.
 */
function showToast(message) {
    const toast = document.getElementById('toast-notification');
    if (toast) {
        toast.textContent = message;
        toast.classList.add('show');
        
        // ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 3 ‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂Ö‡∂≠‡∑î‡∂ª‡∑î‡∂Ø‡∑Ñ‡∂±‡∑ä ‡∑Ä‡∑ì‡∂∏‡∂ß
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }
}
