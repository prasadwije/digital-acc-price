/**
 * Digital Account Price List - Main Script (Cloudflare Optimized)
 * Fetches data from Cloudflare Proxy (Fast Cache) and renders the home page tiles.
 */

// ***************************************************************
// üí° GLOBAL FUNCTIONS (Toast, Loader, and Price Helper)
// THESE MUST BE IN GLOBAL SCOPE FOR details_script.js TO ACCESS THEM
// ***************************************************************

/**
 * Price String ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä Numeric Value ‡∂ë‡∂ö ‡∑É‡∑Ñ Currency Symbol/Suffix ‡∂ë‡∂ö ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í.
 * @param {string} priceString
 * @returns {{value: number, symbol: string}}
 */
function extractPriceAndSymbol(priceString) {
    if (!priceString) return { value: 0, symbol: '' };
    
    // ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑Ñ‡∑í‡∑É‡∑ä‡∂≠‡∑ê‡∂±‡∑ä ‡∂Ö‡∂∫‡∑í‡∂±‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í
    const cleanedString = priceString.toString().replace(/\s/g, ''); 
    
    // FINAL FIX REGEX: 
    // Group 1: Symbol Before Number (e.g., Rs., $)
    // Group 2: Number Part (e.g., 4,500.50) - (,) ‡∑É‡∑Ñ (.) ‡∂Ø‡∑Å‡∂∏‡∑É‡∑ä‡∂Æ‡∑è‡∂±/‡∂ö‡∑ú‡∂∏‡∑è ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö
    // Group 3: Symbol After Number (e.g., /USDT, /-)
    const match = cleanedString.match(/^([^0-9]+)?([0-9.,]+)([^0-9]+)?$/);

    if (!match) return { value: parseFloat(priceString) || 0, symbol: '' };

    const symbolBefore = match[1] || '';
    const rawValue = match[2];
    const symbolAfter = match[3] || '';

    // Comma remove ‡∂ö‡∂ª‡∂Ω‡∑è float ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ä‡∑í‡∂Ø‡∑í‡∂∫‡∂ß ‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è (Final value ‡∑É‡∂≥‡∑Ñ‡∑è)
    const value = parseFloat(rawValue.replace(/,/g, '')) || 0; 

    // Symbol ‡∂ë‡∂ö ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂Ω‡∑è Return ‡∂ö‡∂ª‡∂∫‡∑í (Symbol ‡∂ë‡∂ö‡∑ö ‡∑Ñ‡∑í‡∑É‡∑ä‡∂≠‡∑ê‡∂±‡∑ä ‡∂±‡∑ê‡∂≠)
    return { 
        value: value, 
        symbol: (symbolBefore + symbolAfter).trim() 
    };
}

/**
 * Loading Screen ‡∂ë‡∂ö ‡∑É‡∂ü‡∑Ä‡∂∫‡∑í. Data Load ‡∑Ä‡∑ñ ‡∂¥‡∑É‡∑î ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑Ä‡∑ö.
 */
function hideLoader() {
    const loader = document.getElementById('loading-screen');
    if (loader) {
        loader.classList.add('hidden');
    }
}

/**
 * ‡∂ï‡∂±‡∑ë‡∂∏ Text ‡∂ë‡∂ö‡∂ö‡∑ä Clipboard ‡∂ë‡∂ö‡∂ß Copy ‡∂ö‡∂ª‡∂∫‡∑í.
 */
function copyToClipboard(text) {
    // 1. Textarea ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂Ø‡∂±‡∑Ä‡∑è
    const tempInput = document.createElement('textarea');
    // HTML Escape ‡∂ö‡∂ª‡∂¥‡∑î Line Breaks ‡∑É‡∑ê‡∂∂‡∑ë Line Breaks ‡∂∂‡∑Ä‡∂ß ‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í
    tempInput.value = text.replace(/\\n/g, '\n'); 
    document.body.appendChild(tempInput);
    
    // 2. Text ‡∂ë‡∂ö Select ‡∂ö‡∂ª‡∂Ω‡∑è Copy ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    tempInput.select();
    tempInput.setSelectionRange(0, 99999); // Mobile Support
    document.execCommand('copy');
    
    // 3. Textarea ‡∂ë‡∂ö Remove ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    document.body.removeChild(tempInput);

    // 4. Notification ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±
    showToast('Copied to clipboard!');
}

/**
 * Auto-hiding Toast Notification ‡∂ë‡∂ö ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂∫‡∑í.
 */
function showToast(message) {
    const toast = document.getElementById('toast-notification');
    if (toast) {
        toast.textContent = message;
        toast.classList.add('show');
        
        // ‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª 3 ‡∂ö‡∂ß ‡∂¥‡∑É‡∑î ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂Ö‡∂≠‡∑î‡∂ª‡∑î‡∂Ø‡∑Ñ‡∂±‡∑ä ‡∑Ä‡∑ì‡∂∏‡∂ß
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }
}

// ***************************************************************
// üí° MAIN EXECUTION LOGIC
// ***************************************************************

document.addEventListener('DOMContentLoaded', () => {
    // üî• CONFIGURATION VARIABLES
    const DATA_URL = 'https://price-list-cache-proxy.prasadsandaruwan85.workers.dev/'; 

    const container = document.getElementById('products-container');
    const title = document.getElementById('page-title'); 

    const urlParams = new URLSearchParams(window.location.search);
    const isReseller = urlParams.get('role') === 'reseller';

    if (isReseller) {
        if (title) title.textContent = 'Reseller Price List (Private)';
    }
    
    // ----------------------------------------------------
    // ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑ì‡∂∏ ‡∑É‡∑Ñ Rendering Logic
    // ----------------------------------------------------
    function processAndRenderData(data) {

        if (!container) {
        return; // Container ‡∂ë‡∂ö ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä function ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂±‡∑Ä‡∑è
        }
        const pricesData = (data && data.prices) ? data.prices : data; 
        
        if (!Array.isArray(pricesData)) {
            console.error("Invalid data structure received. Prices array missing.");
            container.innerHTML = `<p style="color: red; text-align: center;">‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑Ä‡∑ä‚Äç‡∂∫‡∑î‡∑Ñ‡∂∫ ‡∂Ø‡∑ù‡∑Ç ‡∑É‡∑Ñ‡∑í‡∂≠‡∂∫‡∑í. Tiles ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.</p>`;
            hideLoader();
            return;
        }
        
        // Data Grouping Logic
        const groupedData = pricesData.reduce((acc, item) => {
            
            const customerPriceInfo = extractPriceAndSymbol(item.Customer_Price_LKR);
            const resellerPriceInfo = extractPriceAndSymbol(item.Reseller_Price_LKR);
            
            const currentPrice = isReseller ? resellerPriceInfo.value : customerPriceInfo.value;
            const currentSymbol = isReseller ? resellerPriceInfo.symbol : customerPriceInfo.symbol;
            
            if (!acc[item.Tool_Name] || currentPrice < acc[item.Tool_Name].minPrice) {
                acc[item.Tool_Name] = {
                    minPrice: currentPrice,
                    symbol: currentSymbol, 
                    firstPlan: item,
                    plans: []
                };
            }
            acc[item.Tool_Name].plans.push(item);
            return acc;
        }, {});

        container.innerHTML = ''; 

        // Tiles Render ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
        for (const toolName in groupedData) {
            const tool = groupedData[toolName];
            const firstPlan = tool.firstPlan;

            // FIX 1: Tool Name ‡∂ë‡∂ö‡∑ö Newline (‡∂±‡∑Ä ‡∂¥‡∑ö‡∑Ö‡∑í) ‡∑É‡∑Ñ ‡∂Ö‡∂±‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ñ‡∑í‡∑É‡∑ä‡∂≠‡∑ê‡∂±‡∑ä ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
            const cleanToolName = toolName.replace(/\n/g, '').trim(); 

            // FIX 2: Copy Text Logic - Tool Name Header ‡∂ë‡∂ö ‡∂∏‡∑î‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∂ª‡∂∫‡∑í
            const toolNameHeading = `‚úÖ ${cleanToolName} - Price List\\n\\n`; 

            // All Plans Text Body ‡∂ë‡∂ö ‡∑Ñ‡∂Ø‡∂±‡∑Ä‡∑è (Header ‡∂ë‡∂ö ‡∂±‡∑ê‡∂≠‡∑í‡∑Ä)
            const allPlansTextBody = tool.plans.map(plan => {
                const resellerPriceInfo = extractPriceAndSymbol(plan.Reseller_Price_LKR);
                const customerPriceInfo = extractPriceAndSymbol(plan.Customer_Price_LKR);
                
                // Reseller's Price Logic (Discount)
                const priceLabel = 'Reseller Price';
                const resellerDisplayPrice = customerPriceInfo.symbol.startsWith('$') || customerPriceInfo.symbol.toLowerCase().startsWith('rs.')
                    ? `${resellerPriceInfo.symbol}${resellerPriceInfo.value.toLocaleString()}`
                    : `${resellerPriceInfo.value.toLocaleString()}${resellerPriceInfo.symbol}`;

                // Normal Price Logic
                const customerDisplayPrice = customerPriceInfo.symbol.startsWith('$') || customerPriceInfo.symbol.toLowerCase().startsWith('rs.')
                    ? `${customerPriceInfo.symbol}${customerPriceInfo.value.toLocaleString()}`
                    : `${customerPriceInfo.value.toLocaleString()}${customerPriceInfo.symbol}`;


                // ‡∂ë‡∂ö‡∑ä Plan ‡∂ë‡∂ö‡∂ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª
                return `üî• ${plan.Plan_Tier} (${plan.Subscription_Type}) - ${plan.Duration_Months}\n` +
                        `   Normal Price: ${customerDisplayPrice}\n` + // üî• FIX: Normal Price ‡∂ë‡∂ö
                        `   Your Price: ${resellerDisplayPrice}\n` + // üî• FIX: Reseller Price ‡∂ë‡∂ö
                        `   Features: ${plan.Key_Features}`;
            }).join('\\n\\n'); // Line breaks 2‡∂ö‡∑ä ‡∂≠‡∂∂‡∂∫‡∑í

            // FINAL COPY TEXT: Header + Body ‡∂ë‡∂ö ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂∫‡∑í
            const allPlansText = toolNameHeading + allPlansTextBody + `\\n\\n[Add Your Contact Details Here]`;

            // FIX 3: Escape Logic (Copy Button ‡∑É‡∂≥‡∑Ñ‡∑è)
            const safeAllPlansText = allPlansText.replace(/'/g, '‚Äô').replace(/"/g, '‚Äù').replace(/\n/g, '\\n');
            
            // FIX 4 & 6: Copy Button HTML (Unconditional Generation + Conditional Hiding)
            const copyButtonHtml = `
                <button class="copy-all-btn ${!isReseller ? 'hidden-copy-btn' : ''}" 
                        onclick="event.stopPropagation(); event.preventDefault(); copyToClipboard('${safeAllPlansText}')" 
                        title="${isReseller ? 'Copy all plans for Reseller' : 'Copy for Customer'}">
                    <svg class="copy-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM19 5H8C6.9 5 6 5.9 6 7V21C6 22.1 6.9 23 8 23H19C20.1 23 21 22.1 21 21V7C21 5.9 20.1 5 19 5ZM19 21H8V7H19V21Z"/>
                    </svg>
                </button>
            `;

            const detailsLink = `details.html?tool=${encodeURIComponent(cleanToolName)}&role=${isReseller ? 'reseller' : 'customer'}`;
            
            // FINAL PRICE DISPLAY LOGIC FOR TILE
            const symbolIsPrefix = tool.symbol.startsWith('$') || tool.symbol.startsWith('‚Ç¨') || tool.symbol.toLowerCase().startsWith('rs.');
            const displayPrice = tool.minPrice.toLocaleString();
            
            const finalPriceHtml = symbolIsPrefix 
                ? `${tool.symbol}${displayPrice}` // Prefix: $1,000
                : `${displayPrice}${tool.symbol}`; // Suffix: 1,000/-
            
            const tileHtml = `
                <a href="${detailsLink}" class="product-tile">
                    ${copyButtonHtml}
                    
                    <img src="${firstPlan.Image_URL}" alt="${toolName} Logo">
                    <h3>${toolName}</h3> 
                    <!-- FIX: Symbol prefix/suffix Logic -->
                    <p class="summary-price">Starting from ${finalPriceHtml}</p>
                </a>
            `;
            container.innerHTML += tileHtml;
        }
        
        // Loader ‡∂ë‡∂ö Hide ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        hideLoader();
    }

    // ----------------------------------------------------
    // FINAL FETCH LOGIC (Cloudflare Caching)
    // ----------------------------------------------------
    function fetchLatestData() {
        fetch(DATA_URL)
        .then(response => {
            if (!response.ok) throw new Error('Network response not ok');
            return response.json();
        })
        .then(data => {
            // Data ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑è‡∂ß ‡∂¥‡∑É‡∑ä‡∑É‡∑ö Render ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
            processAndRenderData(data); 
        })
        .catch(error => {
            console.error('Error fetching data:', error);
            container.innerHTML = `<p style="color: red; text-align: center;">‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä. Cloudflare Cache ‡∂ë‡∂ö ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.</p>`;
            hideLoader();
        });
    }

    // Initial Call
    fetchLatestData();
});
